@use 'sass:math';
@use 'sass:map';
@use '../../../styles/common/var' as *;
@use '../../../styles/mixins/button' as *;
@use '../../../styles/mixins/mixins' as *;
@use '../../../styles/mixins/utils' as *;
@use '../../../styles/mixins/var' as *;
@use '../../../styles/main';
@use '../../../styles/mixins/button';
@use './variables' as *;

@include b(btn) {
  // @debug $button;
  @include set-component-css-var('btn', $button);
}
// :root {
//   --gloal-bg: green;
// }
  // background: var(--gloal-bg);
@include b(btn) {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: map.get($input-height, 'default');
  line-height: 1;
  white-space: nowrap;
  cursor: pointer;
  text-align: center;
  box-sizing: border-box;
  outline: none;
  // transition: all 0.3s $ease-in-out;
  transition: all 0.3s map.get($transition-function, 'ease-in-out-bezier');
  user-select: none;
  vertical-align: middle;
  -webkit-appearance: none;
  color: getCssVar('btn', 'text-color');
  background-color: getCssVar('btn', 'bg-color');
  border: getCssVar('border');
  border-color: getCssVar('btn', 'border-color');
  
  &:hover,
  &:focus {
    color: getCssVar('btn', 'hover', 'text-color');
    border-color: getCssVar('btn', 'hover', 'border-color');
    background-color: getCssVar('btn', 'hover', 'bg-color');
    outline: none;
  }

  &:active {
    color: getCssVar('btn', 'active', 'text-color');
    border-color: getCssVar('btn', 'active', 'border-color');
    background-color: getCssVar('btn', 'active', 'bg-color');
    outline: none;
  }

  &:focus-visible {
    outline: 2px solid getCssVar('button', 'outline-color');
    outline-offset: 1px;
  }

  // button space
  &+& {
    margin-left: 12px;
  }


  /*
  *  button size y-btn--large
  */
  @each $size in (large, small) {
    @include m($size) { // y-btn--small
      @include set-css-var-value(
        ('btn', 'size'),
        map.get($input-height, $size) // --y-btn-size
      );
  
      height: getCssVar('btn', 'size');
  
      & [class*='#{$namespace}-icon'] {
        & + span {
          margin-left: map.get($button-icon-span-gap, $size);
        }
      }
  
      @include button-size(
        map.get($button-padding-vertical, $size) - $button-border-width,
        map.get($button-padding-horizontal, $size) - $button-border-width,
        map.get($button-font-size, $size),
        map.get($button-border-radius, $size)
      );
  
      @include when(circle) {
        width: getCssVar('btn', 'size');
        padding: map.get($button-padding-vertical, $size) - $button-border-width;
      }
    }
  }
  // button y-btn--success
  @each $type in (primary, success, warning, error, info) {
    @include m($type) {
      @include button-variant($type);
    }
  }
  // button is-text
  @include when(text) {
    color: getCssVar('btn', 'text-color');
    border: 0 solid transparent;
    background-color: transparent;

    @include when(disabled) {
      color: getCssVar('btn', 'disabled', 'text-color');
      background-color: transparent !important;
    }

    &:not(.is-disabled) {

      &:hover,
      &:focus {
        background-color: getCssVar('fill-color', 'light');
      }

      &:focus-visible {
        outline: 2px solid getCssVar('btn', 'outline-color');
        outline-offset: 1px;
      }

      &:active {
        background-color: getCssVar('fill-color');
      }

      @include when(has-bg) {
        background-color: getCssVar('fill-color', 'light');

        &:hover,
        &:focus {
          background-color: getCssVar('fill-color');
        }

        &:active {
          background-color: getCssVar('fill-color', 'dark');
        }
      }
    }
  }

  @include m(text) {
    border-color: transparent;
    background: transparent;
    color: getCssVar('color', 'primary');
    padding-left: 0;
    padding-right: 0;

    @include when(disabled) {
      color: getCssVar('button', 'disabled', 'text-color');
      background-color: transparent !important;
      border-color: transparent !important;
    }

    &:not(.is-disabled) {

      &:hover,
      &:focus {
        color: getCssVar('color', 'primary', 'light-3');
        border-color: transparent;
        background-color: transparent;
      }

      &:active {
        color: getCssVar('color', 'primary', 'dark-2');
        border-color: transparent;
        background-color: transparent;
      }
    }
  }
  // button shape 
  @include when(round) {
    border-radius: getCssVar('border-radius', 'round');
  }

  @include when(circle) {
    border-radius: 50%;
    padding: map.get($button-padding-vertical, 'default') - $button-border-width;
  }

  // button link is-link
  @include when(link) {
    border-color: transparent;
    color: getCssVar('button', 'text-color');
    background: transparent;
    padding: 2px;
    height: auto;

    &:hover,
    &:focus {
      color: getCssVar('button', 'hover', 'link-text-color');
    }

    @include when(disabled) {
      color: getCssVar('button', 'disabled', 'text-color');
      background-color: transparent !important;
      border-color: transparent !important;
    }

    &:not(.is-disabled) {

      &:hover,
      &:focus {
        border-color: transparent;
        background-color: transparent;
      }

      &:active {
        color: getCssVar('button', 'active-color');
        border-color: transparent;
        background-color: transparent;
      }
    }
  }

  @include e(link) {
    @include m(expand) {
      letter-spacing: 0.3em;
      margin-right: -0.3em;
    }
  }
}
